import { Telegraf, Context, Markup, Scenes, session } from 'telegraf';
import { Command } from '../commands/command.interface';
import { MessageSubscriber } from './subscribers/message.subscriber';
import { DataSource } from 'typeorm';
import { Event } from '../entities/Event';
import { ADMINS } from '../config';
import { WizardContext } from 'telegraf/typings/scenes';
import { MoreThan, LessThan } from 'typeorm';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
interface LoggingConfig {
  verbose: boolean;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY, HH:mm
function parseDateTime(dateTimeStr: string): Date | null {
  const parts = dateTimeStr.match(/^(\d{2})\.(\d{2})\.(\d{4}), (\d{2}):(\d{2})$/);
  if (!parts) {
    return null;
  }
  const [_, day, month, year, hours, minutes] = parts.map(Number);
  // –ú–µ—Å—è—Ü—ã –≤ JS Date –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É month - 1
  const date = new Date(year, month - 1, day, hours, minutes, 0); // –°–µ–∫—É–Ω–¥—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ 0
  return date;
}

function formatDate(date: Date | null): string {
  if (!date) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü—ã –≤ JS Date –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
  return `${day}.${month}.${year}, ${hours}:${minutes}`;
}

function isAdmin(userId: number | string | undefined): boolean {
  if (!userId) return false;
  return ADMINS.includes(String(userId));
}

function isEventComplete(event: Event): boolean {
  return !!(
    event.title &&
    event.description &&
    event.startDate &&
    event.endDate
  );
}

export class TelegramBot {
  private readonly bot: Telegraf<Scenes.WizardContext>;
  private isInitialized = false;
  private stage: Scenes.Stage<Scenes.WizardContext>;
  private readonly dataSource: DataSource;
  private readonly loggingConfig: LoggingConfig;

  constructor(private readonly token: string, dataSource: DataSource, loggingConfig: LoggingConfig = { verbose: false }) {
    this.dataSource = dataSource;
    this.loggingConfig = loggingConfig;
    this.bot = new Telegraf<Scenes.WizardContext>(this.token);
    this.setupErrorHandling();

    // --- WizardScene –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ ---
    const createEventWizard = new Scenes.WizardScene(
      'create-event-wizard',
      async (ctx: any) => {
        if (!isAdmin(ctx.from?.id)) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return ctx.scene.leave();
        }
        ctx.scene.session.event = {};
        await ctx.reply('–≠—Ç–∞–ø 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:');
        return ctx.wizard.next();
      },
      async (ctx: any) => {
        try {
          ctx.scene.session.event.title = ctx.message.text;
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –±–∞–∑—É
          const event = new Event();
          event.title = ctx.scene.session.event.title;
          console.log('–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É:', event);
          await this.dataSource.manager.save(event);
          console.log('–í—Å—Ç—Ä–µ—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, id:', event.id);
          ctx.scene.session.event.id = event.id;
          await ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n\n–≠—Ç–∞–ø 2/4: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú):`);
          return ctx.wizard.next();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.scene.leave();
        }
      },
      async (ctx: any) => {
        try {
          const event = await this.dataSource.manager.findOneBy(Event, { id: ctx.scene.session.event.id });
          if (!event) {
            console.error('–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, id:', ctx.scene.session.event.id);
            await ctx.reply('–û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return ctx.scene.leave();
          }
          const parsedDate = parseDateTime(ctx.message.text);
          if (!parsedDate) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú:');
            return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
          }
          event.startDate = parsedDate;
          await this.dataSource.manager.save(event);
          ctx.scene.session.event.startDate = event.startDate;
          await ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n\n–≠—Ç–∞–ø 3/4: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú):`);
          return ctx.wizard.next();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return ctx.scene.leave();
        }
      },
      async (ctx: any) => {
        const event = await this.dataSource.manager.findOneBy(Event, { id: ctx.scene.session.event.id });
        if (!event) {
          await ctx.reply('–û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
          return ctx.scene.leave();
        }
        const parsedDate = parseDateTime(ctx.message.text);
        if (!parsedDate) {
          await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú');
          return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        }
        event.endDate = parsedDate;
        await this.dataSource.manager.save(event);
        ctx.scene.session.event.endDate = event.endDate;
        await ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n\n–≠—Ç–∞–ø 4/4: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:`);
        return ctx.wizard.next();
      },
      async (ctx: any) => {
        const event = await this.dataSource.manager.findOneBy(Event, { id: ctx.scene.session.event.id });
        if (!event) {
          await ctx.reply('–û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
          return ctx.scene.leave();
        }
        event.description = ctx.message.text;
        await this.dataSource.manager.save(event);
        
        const buttons = [
          [Markup.button.callback('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', `publish_event_${event.id}`), 
           Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_event_${event.id}`)]
        ];
        
        await ctx.reply(
          `–í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n\n–°—Ç–∞—Ç—É—Å: ${event.isPublished ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}`,
          Markup.inlineKeyboard(buttons)
        );
        return ctx.scene.leave();
      }
    );

    // –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    const editEventWizard = new Scenes.WizardScene(
      'edit-event-wizard',
      async (ctx: any) => {
        if (!isAdmin(ctx.from?.id)) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
          return ctx.scene.leave();
        }
        const eventId = ctx.scene.state.eventId;
        const event = await this.dataSource.manager.findOneBy(Event, { id: eventId });
        
        if (!event) {
          await ctx.reply('–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
          return ctx.scene.leave();
        }

        const buttons = [
          [Markup.button.callback('‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', 'edit_title')],
          [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', 'edit_start_date')],
          [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', 'edit_end_date')],
          [Markup.button.callback('‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ', 'edit_description')],
          [Markup.button.callback(event.isPublished ? 'üìù –°–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º' : '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'toggle_publish')],
          [Markup.button.callback(event.isCancelled ? '‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É' : '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É', 'toggle_cancel')],
          [Markup.button.callback('üìã –í—Å—Ç—Ä–µ—á–∏', 'admin_events'), 
           Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ];

        await ctx.reply(
          `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n` +
          `–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n` +
          `–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n` +
          `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n` +
          `–°—Ç–∞—Ç—É—Å: ${event.isPublished ? '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' : 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫'}\n` +
          `–û—Ç–º–µ–Ω–µ–Ω–∞: ${event.isCancelled ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`,
          Markup.inlineKeyboard(buttons)
        );
        return ctx.wizard.next();
      },
      async (ctx: any) => {
        if (!ctx.callbackQuery) {
          return;
        }

        const action = ctx.callbackQuery.data;
        const eventId = ctx.scene.state.eventId;
        const event = await this.dataSource.manager.findOneBy(Event, { id: eventId });

        if (!event) {
          await ctx.reply('–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
          return ctx.scene.leave();
        }

        switch (action) {
          case 'edit_title':
            ctx.scene.state.editingField = 'title';
            await ctx.reply(
              `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`,
              Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cancel_edit')]])
            );
            break;
          case 'edit_start_date':
            ctx.scene.state.editingField = 'startDate';
            await ctx.reply(
              `–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú:`,
              Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cancel_edit')]])
            );
            break;
          case 'edit_end_date':
            ctx.scene.state.editingField = 'endDate';
            await ctx.reply(
              `–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú:`,
              Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cancel_edit')]])
            );
            break;
          case 'edit_description':
            ctx.scene.state.editingField = 'description';
            await ctx.reply(
              `–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:`,
              Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'cancel_edit')]])
            );
            break;
          case 'toggle_publish':
            if (!isEventComplete(event)) {
              await ctx.answerCbQuery('–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.');
              return;
            }
            event.isPublished = !event.isPublished;
            await this.dataSource.manager.save(event);
            await ctx.answerCbQuery(event.isPublished ? '–í—Å—Ç—Ä–µ—á–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!' : '–í—Å—Ç—Ä–µ—á–∞ —Å–¥–µ–ª–∞–Ω–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const buttons = [
              [Markup.button.callback('‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', 'edit_title')],
              [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', 'edit_start_date')],
              [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', 'edit_end_date')],
              [Markup.button.callback('‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ', 'edit_description')],
              [Markup.button.callback(event.isPublished ? 'üìù –°–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º' : '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'toggle_publish')],
              [Markup.button.callback(event.isCancelled ? '‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É' : '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É', 'toggle_cancel')],
              [Markup.button.callback('üìã –í—Å—Ç—Ä–µ—á–∏', 'admin_events'), 
               Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ];

            await ctx.editMessageText(
              `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n` +
              `–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n` +
              `–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n` +
              `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n` +
              `–û–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n` +
              `–°—Ç–∞—Ç—É—Å: ${event.isPublished ? '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' : 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫'}\n` +
              `–û—Ç–º–µ–Ω–µ–Ω–∞: ${event.isCancelled ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}\n\n` +
              `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`,
              Markup.inlineKeyboard(buttons)
            );
            return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
          case 'toggle_cancel':
            event.isCancelled = !event.isCancelled;
            await this.dataSource.manager.save(event);
            await ctx.answerCbQuery(event.isCancelled ? '–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!' : '–í—Å—Ç—Ä–µ—á–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const buttons2 = [
              [Markup.button.callback('‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', 'edit_title')],
              [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', 'edit_start_date')],
              [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', 'edit_end_date')],
              [Markup.button.callback('‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ', 'edit_description')],
              [Markup.button.callback(event.isPublished ? 'üìù –°–¥–µ–ª–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º' : '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'toggle_publish')],
              [Markup.button.callback(event.isCancelled ? '‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É' : '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É', 'toggle_cancel')],
              [Markup.button.callback('üìã –í—Å—Ç—Ä–µ—á–∏', 'admin_events'), 
               Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ];

            await ctx.editMessageText(
              `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n` +
              `–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n` +
              `–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n` +
              `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n` +
              `–û–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n` +
              `–°—Ç–∞—Ç—É—Å: ${event.isPublished ? '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' : 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫'}\n` +
              `–û—Ç–º–µ–Ω–µ–Ω–∞: ${event.isCancelled ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}\n\n` +
              `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`,
              Markup.inlineKeyboard(buttons2)
            );
            return;
          case 'cancel_edit':
            await ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return ctx.wizard.back();
          case 'main_menu':
            await ctx.scene.leave();
            await ctx.scene.enter('main-menu');
            return;
          case 'admin_events':
            await ctx.scene.leave();
            await ctx.editMessageText(
              '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á:',
              Markup.inlineKeyboard([
                [Markup.button.callback('–ë–ª–∏–∂–∞–π—à–∏–µ', 'admin_upcoming_events')],
                [Markup.button.callback('–ü—Ä–æ—à–µ–¥—à–∏–µ', 'admin_past_events')],
                [Markup.button.callback('–í—Å–µ', 'admin_all_events')],
                [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'admin')]
              ])
            );
            return;
        }
        return ctx.wizard.next();
      },
      async (ctx: any) => {
        const eventId = ctx.scene.state.eventId;
        const event = await this.dataSource.manager.findOneBy(Event, { id: eventId });
        const field = ctx.scene.state.editingField;
        const newValue = ctx.message.text;

        if (!event) {
          await ctx.reply('–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
          return ctx.scene.leave();
        }

        try {
          switch (field) {
            case 'title':
              event.title = newValue;
              break;
            case 'startDate':
              const parsedStartDate = parseDateTime(newValue);
              if (!parsedStartDate) {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú:');
                return;
              }
              event.startDate = parsedStartDate;
              break;
            case 'endDate':
              const parsedEndDate = parseDateTime(newValue);
              if (!parsedEndDate) {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú:');
                return;
              }
              event.endDate = parsedEndDate;
              break;
            case 'description':
              event.description = newValue;
              break;
          }

          await this.dataSource.manager.save(event);
          await ctx.reply('–ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ
          const buttons = [
            [Markup.button.callback('‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', 'edit_title')],
            [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', 'edit_start_date')],
            [Markup.button.callback('‚úèÔ∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', 'edit_end_date')],
            [Markup.button.callback('‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ', 'edit_description')],
            [Markup.button.callback('üìã –í—Å—Ç—Ä–µ—á–∏', 'admin_events'), 
             Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ];

          await ctx.reply(
            `–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ:\n\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n` +
            `–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n` +
            `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n` +
            `–û–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`,
            Markup.inlineKeyboard(buttons)
          );
          return ctx.wizard.back();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          return ctx.wizard.back();
        }
      }
    );

    // –°—Ü–µ–Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const mainMenuScene = new Scenes.BaseScene<Scenes.WizardContext>('main-menu');
    mainMenuScene.enter(async (ctx) => {
      const buttons = [
        [Markup.button.callback('–ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏', 'new_events'), Markup.button.callback('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏', 'my_events')],
        [Markup.button.callback('–û—Ç–∑—ã–≤—ã', 'reviews'), Markup.button.callback('–û –∫–ª—É–±–µ', 'info')],
        [Markup.button.callback('–ü–æ–º–æ—â—å', 'help')]
      ];
      if (isAdmin(ctx.from?.id)) {
        buttons.push([Markup.button.callback('–ê–¥–º–∏–Ω–∫–∞', 'admin')]);
      }
      await ctx.reply(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        Markup.inlineKeyboard(buttons)
      );
    });

    this.stage = new Scenes.Stage<Scenes.WizardContext>([createEventWizard, editEventWizard, mainMenuScene]);
    
    this.bot.use(session());
    this.bot.use(this.stage.middleware());

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    this.bot.action(/^publish_event_(\d+)$/, async (ctx) => {
      const eventId = parseInt(ctx.match[1]);
      const event = await this.dataSource.manager.findOneBy(Event, { id: eventId });
      
      if (!event) {
        await ctx.answerCbQuery('–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      if (!isEventComplete(event)) {
        await ctx.answerCbQuery('–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.');
        return;
      }

      event.isPublished = true;
      await this.dataSource.manager.save(event);
      
      await ctx.answerCbQuery('–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!');
      await ctx.editMessageText(
        `–í—Å—Ç—Ä–µ—á–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${event.description}\n\n–°—Ç–∞—Ç—É—Å: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞`,
        Markup.inlineKeyboard([
          [Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_event_${event.id}`)]
        ])
      );
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.action(/^edit_event_(\d+)$/, async (ctx) => {
      const eventId = parseInt(ctx.match[1]);
      await ctx.answerCbQuery();
      // @ts-ignore
      ctx.scene.enter('edit-event-wizard', { eventId });
    });

    this.bot.action('admin', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageText(
        '–ê–¥–º–∏–Ω-–º–µ–Ω—é:',
        Markup.inlineKeyboard([
          [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É', 'create_event'), Markup.button.callback('–í—Å—Ç—Ä–µ—á–∏', 'admin_events')],
          [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'), Markup.button.callback('–ù–∞–∑–∞–¥', 'main_menu')]
        ])
      );
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å—Ç—Ä–µ—á–∏"
    this.bot.action('admin_events', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageText(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á:',
        Markup.inlineKeyboard([
          [Markup.button.callback('–ë–ª–∏–∂–∞–π—à–∏–µ', 'admin_upcoming_events')],
          [Markup.button.callback('–ü—Ä–æ—à–µ–¥—à–∏–µ', 'admin_past_events')],
          [Markup.button.callback('–í—Å–µ', 'admin_all_events')],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'admin')]
        ])
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Å—Ç—Ä–µ—á
    this.bot.action('admin_upcoming_events', async (ctx) => {
      await ctx.answerCbQuery();
      const now = new Date();
      const events = await this.dataSource.manager.find(Event, {
        where: {
          startDate: MoreThan(now)
        },
        order: {
          startDate: 'ASC'
        }
      });
      await this.sendEventsList(ctx, events, '–ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏');
    });

    this.bot.action('admin_past_events', async (ctx) => {
      await ctx.answerCbQuery();
      const now = new Date();
      const events = await this.dataSource.manager.find(Event, {
        where: {
          startDate: LessThan(now)
        },
        order: {
          startDate: 'DESC'
        }
      });
      await this.sendEventsList(ctx, events, '–ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏');
    });

    this.bot.action('admin_all_events', async (ctx) => {
      await ctx.answerCbQuery();
      const events = await this.dataSource.manager.find(Event, {
        order: {
          startDate: 'DESC'
        }
      });
      await this.sendEventsList(ctx, events, '–í—Å–µ –≤—Å—Ç—Ä–µ—á–∏');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    this.bot.action('main_menu', async (ctx) => {
      await ctx.answerCbQuery();
      const buttons = [
        [Markup.button.callback('–ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏', 'new_events'), Markup.button.callback('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏', 'my_events')],
        [Markup.button.callback('–û—Ç–∑—ã–≤—ã', 'reviews'), Markup.button.callback('–û –∫–ª—É–±–µ', 'info')],
        [Markup.button.callback('–ü–æ–º–æ—â—å', 'help')]
      ];
      if (isAdmin(ctx.from?.id)) {
        buttons.push([Markup.button.callback('–ê–¥–º–∏–Ω–∫–∞', 'admin')]);
      }
      await ctx.editMessageText(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        Markup.inlineKeyboard(buttons)
      );
    });
  }

  private async sendEventsList(ctx: any, events: Event[], title: string) {
    if (events.length === 0) {
      await ctx.editMessageText(
        `${title}:\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç`,
        Markup.inlineKeyboard([[Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'admin_events')]])
      );
      return;
    }

    const messageText = events.map(event => {
      return `üìÖ ${event.title}\n` +
             `–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${formatDate(event.startDate)}\n` +
             `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(event.endDate)}\n` +
             `–°—Ç–∞—Ç—É—Å: ${event.isPublished ? '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞' : 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫'}\n` +
             `–û—Ç–º–µ–Ω–µ–Ω–∞: ${event.isCancelled ? '‚ùå –î–∞' : '‚úÖ –ù–µ—Ç'}\n` +
             `ID: ${event.id}\n`;
    }).join('\n');

    const buttons = events.map(event => [
      Markup.button.callback(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "${event.title}"`, `edit_event_${event.id}`)
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'admin_events')]);

    await ctx.editMessageText(
      `${title}:\n\n${messageText}`,
      Markup.inlineKeyboard(buttons)
    );
  }

  public getWebhookCallback(path: string) {
    return this.bot.webhookCallback(path);
  }
  
  public async setWebhook(url: string) {
    await this.bot.telegram.setWebhook(url);
  }

  private setupErrorHandling(): void {
    this.bot.catch((err: any, ctx: Context) => {
      console.error(`Error for ${ctx.updateType}:`, err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞').catch(console.error);
    });
  }

  private log(message: string, data?: any): void {
    if (this.loggingConfig.verbose) {
      if (data) {
        console.log(`[BOT] ${message}`, data);
      } else {
        console.log(`[BOT] ${message}`);
      }
    }
  }

  public async launchWebhook(webhookUrl: string, port: number = 3000): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized. Call init() first');
    }

    try {
      await this.bot.telegram.setWebhook(webhookUrl);
      await this.bot.launch({
        webhook: {
          domain: webhookUrl,
          port: port
        }
      });
      this.log(`Bot started in webhook mode on ${webhookUrl}`);
    } catch (error) {
      console.error('Webhook launch failed:', error);
      throw error;
    }
  }

  public async launchPolling(): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized. Call init() first');
    }

    try {
      await this.bot.launch();
      this.log('Bot started in polling mode');
    } catch (error) {
      console.error('Polling launch failed:', error);
      throw error;
    }
  }

  public init(commands: Command[], subscribers?: MessageSubscriber[]): void {
    if (this.isInitialized) {
      throw new Error('Bot already initialized');
    }

    this.registerCommands(commands);
    this.registerSubscribers(subscribers || []);
    this.isInitialized = true;
    this.log('Bot initialized');
  }

  public stop(reason?: string): void {
    if (reason) {
      console.log(`Stopping bot: ${reason}`);
    }
    this.bot.stop();
  }

  private registerCommands(commands: Command[]): void {
    commands.forEach(command => {
      this.bot.command(command.name, ctx => {
        this.log(`Command executed: ${command.name}`);
        return command.execute(ctx);
      });
    });
  }

  private registerSubscribers(subscribers: MessageSubscriber[]): void {
    subscribers.forEach(subscriber => {
      this.bot.on(subscriber.messageType, ctx => {
        this.log(`Message received: ${subscriber.messageType}`);
        return subscriber.handle(ctx);
      });
    });
  }

  public addStartMenu() {
    this.bot.start((ctx) => {
      const buttons = [
        [Markup.button.callback('–ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏', 'new_events'), Markup.button.callback('–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏', 'my_events')],
        [Markup.button.callback('–û—Ç–∑—ã–≤—ã', 'reviews'), Markup.button.callback('–û –∫–ª—É–±–µ', 'info')],
        [Markup.button.callback('–ü–æ–º–æ—â—å', 'help')]
      ];
      if (isAdmin(ctx.from?.id)) {
        buttons.push([Markup.button.callback('–ê–¥–º–∏–Ω–∫–∞', 'admin')]);
      }
      return ctx.reply(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:' +
        '\n—Ç–≤–æ–π ID: ' + ctx.from?.id +
        '\nID –∞–¥–º–∏–Ω–æ–≤: ' + ADMINS.join(', '),
        Markup.inlineKeyboard(buttons)
      );
    });

    this.bot.action('info', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.reply('–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –∫–ª—É–±');
    });

    this.bot.action('admin', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageText(
        '–ê–¥–º–∏–Ω-–º–µ–Ω—é:',
        Markup.inlineKeyboard([
          [Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É', 'create_event'), Markup.button.callback('–í—Å—Ç—Ä–µ—á–∏', 'admin_events')],
          [Markup.button.callback('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu'), Markup.button.callback('–ù–∞–∑–∞–¥', 'main_menu')]
        ])
      );
    });
  }

  public addAdminFeatures() {
    this.bot.action('create_event', async (ctx) => {
      await ctx.answerCbQuery();
      if (!isAdmin(ctx.from?.id)) {
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      }
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
      // @ts-ignore
      ctx.scene.enter('create-event-wizard');
    });
  }
}